import { GoogleGenAI } from '@google/genai';
import { 
  AIImageProvider, 
  ImageGenerationConfig, 
  ImageGenerationResponse,
  GeneratedImageData 
} from './types';

// Helper function to extract error message from Google API errors
function extractGoogleErrorMessage(error: any): string {
  if (!error) return 'Unknown error occurred';
  
  // If it's a string error message, try to parse JSON from it
  if (typeof error.message === 'string') {
    const message = error.message;
    
    // Look for JSON structure in the error message
    const jsonMatch = message.match(/\{.*\}/);
    if (jsonMatch) {
      try {
        const errorData = JSON.parse(jsonMatch[0]);
        if (errorData.error?.message) {
          return errorData.error.message;
        }
      } catch (parseError) {
        // If JSON parsing fails, continue with original message
      }
    }
    
    return message;
  }
  
  // If error has a direct message property
  if (error.message) {
    return error.message;
  }
  
  // If error is a string
  if (typeof error === 'string') {
    return error;
  }
  
  return 'Unknown error occurred';
}

export class GeminiProvider implements AIImageProvider {
  private ai: GoogleGenAI;

  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY environment variable is required');
    }
    
    this.ai = new GoogleGenAI({
      apiKey: process.env.GEMINI_API_KEY,
    });
  }

  getName(): string {
    return 'gemini';
  }

  async generateImage(
    prompt: string, 
    config: ImageGenerationConfig = {}
  ): Promise<ImageGenerationResponse> {
    try {
      const response = await this.ai.models.generateImages({
        model: 'models/imagen-3.0-generate-002',
        prompt: prompt,
        config: {
          numberOfImages: config.numberOfImages || 1,
          outputMimeType: config.outputMimeType || 'image/jpeg',
          aspectRatio: config.aspectRatio || '1:1',
          ...config, // Allow additional provider-specific options
        },
      });

      if (!response?.generatedImages || response.generatedImages.length === 0) {
        return {
          success: false,
          error: 'No images generated by Gemini',
        };
      }

      const generatedImages: GeneratedImageData[] = response.generatedImages
        .filter(img => img?.image?.imageBytes)
        .map(img => ({
          imageBytes: img.image!.imageBytes!,
          mimeType: config.outputMimeType || 'image/jpeg',
        }));

      if (generatedImages.length === 0) {
        return {
          success: false,
          error: 'Failed to extract image data from Gemini response',
        };
      }

      return {
        success: true,
        generatedImages,
      };

    } catch (error) {
      console.error('Gemini provider error:', error);
      return {
        success: false,
        error: extractGoogleErrorMessage(error),
      };
    }
  }
} 